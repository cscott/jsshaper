Support yield via a limited-scope CPS conversion.

Pass in value and exception as function arguments to avoid creating objects
on every closure invocation.  Refer to these as arguments[0] and arguments[1]
to avoid pollution the name space.

Pass in array of continuations to Generator constructor to avoid
exposing it to namespace, then use integers instead of functions
as values of the cont: property in return values.

Optimize looping return as common case (ie, return a simple integer
in this case, instead of creating an object wrapper).   This makes loops
as fast as possible.

// Sample source for yield conversion:

function bat(arr) {
  var i;
  // [0]
  for (i=0; i<arr.length; i++) {
     // [1]
     if (test.apply(arr[i], arguments)) {
       // [2]
       try {
         // [3]
         something();
         var j = /* [4] */yield arr[i];
         if (j) {
           // [5]
           something(j);
           return;
         }
         // [6]
       } catch (e) {
         // [7]
         log(e);
         escapes(function() { return e; });
         delete arr[i];
       } finally {
         // [8]
         baz(i);
       }
       // [9]
     }
     // [10]
  }
  // [11]
  return;
}

// This gets converted to:

function bat(arr) {
  var $arguments = arguments; // necessary because original uses 'arguments'
  var $scope$1=Object.create(null);// necessary because original has catch
  var $finally;               // necessary because original has finally
  var $pc = 0;
  var i, j;
  return new Generator(function($stop, $ex, $val) {
    while(true) {
    switch ($pc) {
    case 0: // internal, FIRST
       if ($ex || ($val!==void(0))) { // check first send.
         throw new TypeError();
       }
       i = 0;
       $pc = 1; continue; // looping continuation [OPTIMIZE: FALL THROUGH]
    case 1: // internal
       // internal looping continuation, don't need to check $ex for ex
       // "if (!(i < arr.length)) break;"
       if (i >= arr.length) {
         $pc = 11;
         continue; /* looping continuation, after loop */
       }
       if (test.apply(arr[i], $arguments)) {
           $pc = 2; continue; // [OPTIMIZE: FALL THROUGH]
       } else {
           $pc = 10; continue;
       }
    case 2: // internal
       $pc = 3; continue; // [OPTIMIZE: FALL THROUGH]
    case 3: // internal
       try {
         something();
         $pc = 4; return arr[i]; // yield
       } catch (e) {
         $pc = 7; $ex = {ex:e}; continue; // branch to catch (or finally)
       }
    case 4: // external
      try {
        // external continuation, need to check $ex
        if ($ex) { throw $ex.ex; }
        j = $val;
        if (j) {
            $pc = 5; continue; // OPTIMIZE: FALL THROUGH
        } else {
            $pc = 6; continue;
        }
      } catch (e) {
        $pc=7; $ex={ex:e}; continue; // branch to catch (or finally)
      }
    case 5: // internal
      try {
        something(j);
        throw $stop; // return
      } catch (e) {
        $pc=7; $ex={ex:e}; continue; // branch to catch (or finally)
      }
    case 6: // internal
      try {
          $pc=8; $ex={fall:9,level:0}; continue;// this falls through to finally
      } catch (e) {
        $pc=7; $ex={ex:e}; continue; // branch to catch [FALL THROUGH]
      }
    case 7: // internal, catch(e)
      // branch to finally block if this shouldn't have been caught.

      // note that e has block-level scope; this is desugared out.
      try {
        if ($ex.ex===$stop) { throw $ex.ex; } // don't catch our StopIteration
        $scope$1 = Object.create($scope$1);
        $scope$1.e = $ex.ex;
        log($scope$1.e);
        escapes((function($scope$1){ // capture current scope
            return function() { return $scope$1.e; };
        })($scope$1));
        delete arr[i];
        $scope$1 = Object.getPrototypeOf($scope$1); // pop scope
        $pc=8; $ex={fall:9}; continue; // fall through to finally [FALL THRU]
      } catch (e) {
        $scope$1 = Object.getPrototypeOf($scope$1); // pop scope
        $pc=8; $ex={ex:e}; continue; // branch to finally [FALL THROUGH]
      }
    case 8: // internal, finally
      $finally = $ex;
      baz(i);
      if ($finally.fall) {
          if ($finally.level) {
              $finally.level--;
              $ex = $finally;
              $pc = ...; continue; // next finally up
          } else {
            $pc=$finally.fall; continue; // after try [can't optimize]
          }
      } else {
        throw $finally.ex;
      }
    case 9: // internal
      $pc = 10; continue; // after if [OPTIMIZE: FALL THROUGH]
    case 10: // internal
      // implicit increment, belonging to for loop
      i++;
      $pc = 1; continue; // loop!
    case 11: // internal
      throw $stop;
    }
    }
  }.bind(this));
}

// Using this helper to construct the generator object:

function Generator(cont_func) {
  this._cont_func = cont_func;
  this._cont_stop = {}; // our stand-in for StopIteration
}
Generator.prototype = {
  next: function() {
    var undef;
    return this.send(undef);
  },
  send: function(val) {
    return this._send(null, val);
  },
  'throw': function(ex) {
    // wrap ex, because we're allowed to throw falsy values (null,undef)
    return this._send({ex:ex},null);
  },
  close: function() {
    try {
      // note that catch clauses have to be modified to ignore StopIteration
      this['throw'].call(this, this._cont_stop);
    } catch (e) {
      if (e!==StopIteration) { throw e; }
    }
  },
  _send: function(exception, value) {
    try {
      return this._cont_func(this._cont_stop, exception, value);
    } catch (e) {
      // close iterator and free memory held by _cont_func
      this._cont_func = function($stop) { throw $stop; };
      if (e===this._cont_stop) { throw StopIteration; }
      throw e;
    }
  },
  toArray: function(arr) {
    arr = arr || [];
    while(true) {
      try {
        arr.push(this.next());
      } catch (e) {
        if (e===StopIteration) { return arr; }
        throw e;
      }
    }
  }
};

//------------------------------------
for (o in ...) {
  ...
}
maps to:

$it=Iterator(...,true);
while(true){
  try {
    o = $it.next();
  } catch (e) {
    if (e===StopIteration) { break; } // how does this work w/ generators?
    throw e;
  }
  ...
}

for example,

function props(obj) {
    for (prop in obj) {
        yield prop;
    }
}

maps to:

function props(obj) {
    var $stop = {};
    var $it$0, prop;
    var $block = {};
    var $catch$e;
    return new Generator(this, $stop, [
        function/*[0]*/() {
            $it$0=Iterator(obj,true);
            return 1;
        },
        function/*[1]*/() {
            // "if (!true) ..." loop check omitted
            return 2;
        },
        function/*[2]*/() {
            try {
                prop=$it$0.next();
                return 6;
            } catch ($e$1) {
                if ($e$1===$stop) { throw $e$1; }
                return { cont:3, ex:$e$1, again:true };
            }
        },
        function/*[3]*/() {
            $catch$e = arguments[0].ex;
            if ($catch$e===StopIteration) return 4;
            else return 5;
        },
        function/*[4]*/() {
            return 8;
        },
        function/*[5]*/() {
            throw $catch$e;
        },
        function/*[6]*/() {
            return {cont:7,ret:prop};
        },
        function/*[7]*/() {
            if (arguments[0]) {
                throw arguments[0].ex;
            }
            arguments[1];
            return 1;
        },
        function/*[8]*/() {
            throw $stop;
        }
    ]);
}
-------------------
Generator.toArray() {
  var a = [];
  for (e in this) { a.push(e); }
  return a;
}

function() {
  var a = [];
  for (var i=0; i<10; i++) {
    try {
      throw i;
    } catch (j) {
      a[i] = function() { return j++; };
    }
  }
  log(a[0]);
  log(a[0]);
  log(a[1]);
  log(a[1]);
}

{ let x=..; .. } -> try { throw void(0); } catch(x) { x=...; ... }

for (let i=...;;i=i+1) { } ->
{let $t; for ($t=...; ;) { let i=$t; ...; i=i+1; $t=i; } }

{
let t;

t = ... t ....;
.. = function() { ... t ... };
}

{$scope = Object.create($scope);
 $scope.t=undefined;

 $scope.t = .... $scope.t ....;

 ... = (function($scope) { return function() { ... $scope.t ... }; })($scope);

 $scope = Object.getPrototypeOf($scope);
}

Only create new $scope objects if the variable escapes; otherwise we can
just gensym the symbol and use var-binding.

---
try {
  i = 0;
  while(true) {
      try {
          if (!(i<5)) throw $w1$break;
          throw $w1$continue;
      } catch (e) {
          if (e!==$w1$continue) throw e;
      }
      i += 1;
  }
} catch (e) {
    if (e!==$w1$break) throw e;
}
---
change catch conversion to rewrite with:
  catch(e) { } ->
  catch(e) { .. $scope = Object.create($scope, {e:{value:$ex}});
             try { ... } finally { $scope = Object.getPrototypeOf($scope); } }

change node.formerly to node.rewrittenTo and go through changing all
node-targets where target.rewrittenTo exists.
